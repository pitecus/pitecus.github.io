{"version":3,"sources":["serviceWorkerRegistration.ts","NavigationItem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","NavigationItem","props","routeColor","iconColor","useLocation","pathname","item","link","to","className","label","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Changelog","lazy","Resume","App","fallback","role","map","navigationItem","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LogRocket","init","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","debug"],"mappings":"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","file":"static/js/main.23db08f5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  Link,\n  useLocation\n} from \"react-router-dom\";\n\nimport INavigationItem from \"./navigation-item.interface\";\n\n/**\n * Navigation item.\n */\nconst NavigationItem = (props: {\n  item: INavigationItem\n}) => {\n  // Get the current location.\n  let location = useLocation();\n\n  // Change the color based on the route.\n  let routeColor = 'text-gray-200 hover:text-black';\n  let iconColor = '';\n  if (location.pathname === props.item.link ? 'underline' : '') {\n    routeColor = 'text-indigo-600';\n    iconColor = 'text-black';\n  }\n\n  // Return the component.\n  return (<Link\n    to={props.item.link}\n    className={`h-12 py-3 ml-3 ${routeColor}`}>\n    {/* Resume */}\n    {\n      props.item.label === 'resume' &&\n      <svg xmlns=\"http://www.w3.org/2000/svg\"\n        className={`inline h-6 w-6 stroke-current ${iconColor}`}\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        stroke=\"currentColor\">\n        <path strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n      </svg>\n    }\n\n    {/* Changelog */}\n    {\n      props.item.label === 'changelog' &&\n      <svg xmlns=\"http://www.w3.org/2000/svg\"\n        className={`inline h-6 w-6 stroke-current ${iconColor}`}\n        fill=\"none\"\n        viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01\" />\n      </svg>\n    }\n    <span className=\"hidden sm:inline\">{props.item.label}</span>\n  </Link>);\n};\n\n/**\n * Export the function.\n */\nexport default NavigationItem;","import './App.css';\n\nimport {\n  Redirect,\n  Route,\n  HashRouter as Router,\n  Switch,\n} from \"react-router-dom\";\nimport {\n  Suspense,\n  lazy\n} from 'react';\n\nimport INavigationItem from './navigation-item.interface';\nimport NavigationItem from './NavigationItem';\n\n// Lazy loading routes.\nconst Changelog = lazy(() => import('./changelog/Changelog'));\nconst Resume = lazy(() => import('./resume/Resume'));\n\nfunction App() {\n  /**\n   * Navigation items.\n   */\n  const navigationItems: INavigationItem[] = [\n    {\n      label: 'resume',\n      link: '/resume'\n    },\n    {\n      label: 'changelog',\n      link: '/changelog'\n    }\n  ];\n\n  // Return the JSX element.\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Router>\n        {/* Navigation */}\n        <div className=\"flex justify-center h-10 bg-white print:hidden shadow\">\n          <div className=\"flex flex-grow justify-between max-w-4xl align-middle px-2\">\n            {/* Left items */}\n            <div className=\"h-10 py-2\">\n              {/* Logo */}\n              <span className=\"p-1 rounded shadow-md font-bold text-white bg-indigo-700\">LM</span>\n              {/* Navigation links */}\n              <nav\n                className=\"inline text-md text-indigo-600 font-black capitalize ml-3\"\n                role=\"navigation\">\n                {\n                  navigationItems.map((navigationItem: INavigationItem) =>\n                    <NavigationItem item={navigationItem} key={navigationItem.label} />\n                  )\n                }\n              </nav>\n            </div>\n            {/* Right items */}\n            <div className=\"text-right\"></div>\n          </div>\n        </div>\n        {/* Content */}\n        <div className=\"calc(min-h-screen - h-10) flex justify-center\">\n          <Switch>\n            <Route path=\"/resume\">\n              <Resume />\n            </Route>\n            <Route path=\"/changelog\">\n              <Changelog />\n            </Route>\n            <Route path=\"*\">\n              <Redirect to=\"/resume\" />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </Suspense>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport App from './App';\nimport LogRocket from 'logrocket';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\n// Initialize Log Rocket.\nLogRocket.init('guwjhj/resume');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.debug);\n"],"sourceRoot":""}